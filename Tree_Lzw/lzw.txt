
LZW算法编码原理：
	1.把字典中的0-255项预置为全部的256（ASCII）个8位字符
	2.输入地一个字符，将其设为s，在字典中肯定存在。
	3.编码器逐个输入字符,每输入一个字符c，然后在字典中查找s+c,只要在字典中找到s+c,则s=s+c，该过程就继续进行。直到在某一点，添加下一个字符c导致搜索失败；字符串s在字典中，而s+c却不在，这时编码器：
	 （1）输出指向字符串s的字典指针到输出流；
	 （2）在下一个可用的字典词条中，存储字符串s+c；
	 （3）把字符串s预置为c。
	4.如果还有尚未压缩的字符，返回步骤3
	5.输出流即为压缩文本

LZW算法解码原理：
	1.把字典中的0-255项预置为全部的256（ASCII）个8位字符
	2.输入第一个指针p，在字典中肯定存在，用其取回第一个字典词条s。将其写进解码器的输出流中，需要把s+c保存到字典中，c未知，是下一个从字典中读取的字符串的第一个字符。
	3.解码器输入下一个指针p, 
	 （1）取出下一个字符串,记为J
	 （2）将J记录到输出流中
	 （3）s+firstchar(J) 添加到字典中
	 （4）s=J,
	4.如果还有尚未解压的指针，返回步骤3
	5.输出流即为原始文本